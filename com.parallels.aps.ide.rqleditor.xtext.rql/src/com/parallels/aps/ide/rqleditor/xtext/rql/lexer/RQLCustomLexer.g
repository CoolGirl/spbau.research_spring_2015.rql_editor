
/*
* generated by Xtext
*/
lexer grammar RQLCustomLexer;


@header {
package com.parallels.aps.ide.rqleditor.xtext.rql.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@members{
	private boolean afterKeyWord = false;
}




KEYWORD_43 : {!afterKeyWord}?=> 'implementing' {afterKeyWord = true;} ;

KEYWORD_42 : {!afterKeyWord}?=> 'composing';

KEYWORD_40 : {!afterKeyWord}?=> 'isnull';

KEYWORD_41 : {!afterKeyWord}?=> 'select';

KEYWORD_37 : {!afterKeyWord}?=> 'empty';

KEYWORD_38 : {!afterKeyWord}?=> 'false';

KEYWORD_39 : {!afterKeyWord}?=> 'limit';

KEYWORD_33 : {!afterKeyWord}?=> 'like';

KEYWORD_34 : {!afterKeyWord}?=> 'null';

KEYWORD_35 : {!afterKeyWord}?=> 'sort';

KEYWORD_36 : {!afterKeyWord}?=> 'true';

KEYWORD_32 : {!afterKeyWord}?=> 'out';

KEYWORD_22 : '!=';

KEYWORD_23 : '<=';

KEYWORD_24 : '>=';

KEYWORD_25 : 'eq';

KEYWORD_26 : 'ge';

KEYWORD_27 : 'gt';

KEYWORD_28 : 'in';

KEYWORD_29 : 'le';

KEYWORD_30 : 'lt';

KEYWORD_31 : 'ne';

KEYWORD_1 : '$';

KEYWORD_2 : '%';

KEYWORD_3 : '&';

KEYWORD_4 : '(';

KEYWORD_5 : ')';

KEYWORD_6 : '*';

KEYWORD_7 : '+';

KEYWORD_8 : ',';

KEYWORD_9 : '-';

KEYWORD_10 : '.';

KEYWORD_11 : '/';

KEYWORD_12 : ':';

KEYWORD_13 : ';';

KEYWORD_14 : '<';

KEYWORD_15 : '=';

KEYWORD_16 : '>';

KEYWORD_17 : '?';

KEYWORD_18 : '@';

KEYWORD_19 : '_';

KEYWORD_20 : '|';

KEYWORD_21 : '~';


RULE_DIGIT : '0'..'9';

RULE_XDIGIT : (RULE_DIGIT|'A'..'F');

RULE_ALPHA : ('A'..'Z'|'a'..'z');

RULE_WSP : (' '|'\t');

RULE_LOGICAL_OP_ALIASES :  {!afterKeyWord}?=> ('or'|'and'|'not');



