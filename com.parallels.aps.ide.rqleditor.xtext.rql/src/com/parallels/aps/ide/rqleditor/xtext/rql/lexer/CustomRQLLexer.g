/*
* generated by Xtext
*/
lexer grammar CustomRQLLexer;


@header {
package com.parallels.aps.ide.rqleditor.xtext.rql.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.

import org.eclipse.xtext.parser.antlr.Lexer;
}


// SURROGATE PAIRS IN THIS LEXER IS A HACK

KEYWORD_53 : ('implementing(')=> 'implementing' | ('i')=> 'i' {$type = RULE_ALPHA;};

KEYWORD_52 : ('composing(')=> 'composing' | ('c')=> 'c' {$type = RULE_ALPHA;};

KEYWORD_49 : '=' (
	('like=')=> 'like=' | ('le=') => 'le=' {$type = KEYWORD_39;} | ('lt=') => 'lt=' {$type = KEYWORD_40;} | 
	('l') => 'l' {$type = RULE_ALPHA;}  |
	('eq=') => 'eq=' {$type = KEYWORD_36;} | ('e') => 'e' {$type = RULE_ALPHA;} |
	('ne=') => 'ne=' {$type = KEYWORD_41;} | ('n') => 'n' {$type = RULE_ALPHA;} |
	('ge=') => 'ge=' {$type = KEYWORD_37;} | ('gt=') => 'gt=' {$type = KEYWORD_38;} | 
	('g') => 'g' {$type = RULE_ALPHA;}
)?;

KEYWORD_50 : ('isnull(') => 'isnull' | ('i')=> 'i' {$type = RULE_ALPHA;};

KEYWORD_51 : ('select(') => 'select' | ('s')=> 's' {$type = RULE_ALPHA;};

KEYWORD_46 : ('empty(') => 'empty' | ('e')=> 'e' {$type = RULE_ALPHA;};

KEYWORD_47 : ('false(') => 'false' | ('f')=> 'f' {$type = RULE_ALPHA;};

KEYWORD_48 : ('limit(') => 'limit' | 
	('li'|'l')=> 'l' {$type = RULE_ALPHA;};

KEYWORD_36 : '\u9797';

KEYWORD_37 : '\u9696';

KEYWORD_38 : '\u9595';

KEYWORD_39 : '\u9876';

KEYWORD_40 : '\u9875';

KEYWORD_41 : '\u9494';

KEYWORD_42 : ('like(') => 'like' | ('lik')=> 'lik' {$type = RULE_ALPHA;} | ('li')=> 'li' {$type = RULE_ALPHA;} | ('l')=> 'l' {$type = RULE_ALPHA;};

KEYWORD_43 : ('null(') => 'null' | ('n')=> 'n' {$type = RULE_ALPHA;};

KEYWORD_44 : ('sort(') => 'sort' | ('s')=> 's' {$type = RULE_ALPHA;};

KEYWORD_45 : ('true(') => 'true' | ('t')=> 't' {$type = RULE_ALPHA;};

KEYWORD_33 : ('and(') => 'and' | ('a')=> 'a' {$type = RULE_ALPHA;};

KEYWORD_34 : ('not(') => 'not' | ('n')=> 'n' {$type = RULE_ALPHA;};

KEYWORD_35 : ('out(') => 'out' | ('o')=> 'o' {$type = RULE_ALPHA;};

KEYWORD_22 : '!=';

KEYWORD_23 : '<=';

KEYWORD_24 : '>=';

KEYWORD_25 : ('eq(') => 'eq' | ('e')=> 'e' {$type = RULE_ALPHA;};

KEYWORD_26 : ('ge(') => 'ge' | ('g')=> 'g' {$type = RULE_ALPHA;};

KEYWORD_27 : ('gt(') => 'gt' | ('g')=> 'g' {$type = RULE_ALPHA;};

KEYWORD_28 : ('in(') => 'in' | ('i')=> 'i' {$type = RULE_ALPHA;};

KEYWORD_29 : ('le(') => 'le' | ('l')=> 'l' {$type = RULE_ALPHA;};

KEYWORD_30 : ('lt(') => 'lt' | ('l')=> 'l' {$type = RULE_ALPHA;};

KEYWORD_31 : ('ne(') => 'ne' | ('n')=> 'n' {$type = RULE_ALPHA;};

KEYWORD_32 : ('or(') => 'or' | ('o')=> 'o' {$type = RULE_ALPHA;};

KEYWORD_1 : '$';

KEYWORD_2 : '%';

KEYWORD_3 : '&';

KEYWORD_4 : '(';

KEYWORD_5 : ')';

KEYWORD_6 : '*';

KEYWORD_7 : '+';

KEYWORD_8 : ',';

KEYWORD_9 : '-';

KEYWORD_10 : '.';

KEYWORD_11 : '/';

KEYWORD_12 : ':';

KEYWORD_13 : ';';

KEYWORD_14 : '<';

KEYWORD_15 : '=' | 'u9874';

KEYWORD_16 : '>';

KEYWORD_17 : '?';

KEYWORD_18 : '@';

KEYWORD_19 : '_';

KEYWORD_20 : '|';

KEYWORD_21 : '~';



RULE_DIGIT : '0'..'9';

RULE_XDIGIT : (RULE_DIGIT|'A'..'F');

RULE_ALPHA : ('A'..'Z'|'a'..'z');

RULE_WSP : (' '|'\t');
