
/*
* generated by Xtext
*/
lexer grammar CustomRQLLexer;


@header {
package com.parallels.aps.ide.rqleditor.xtext.rql.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}




KEYWORD_55 : ('implementing(')=> 'implementing'| ('i')=> 'i' {$type = RULE_ALPHA;};

KEYWORD_54 : ('composing(')=> 'composing'| ('c')=> 'c' {$type = RULE_ALPHA;};

KEYWORD_52 : ('isnull(')=> 'isnull'| ('i')=> 'i' {$type = RULE_ALPHA;};

KEYWORD_53 :  ('select(')=> 'select'| ('s')=> 's' {$type = RULE_ALPHA;};

KEYWORD_48 :  ('empty(')=> 'empty'| ('e')=> 'e' {$type = RULE_ALPHA;};

KEYWORD_49 :  ('false(')=> 'false'| ('f')=> 'f' {$type = RULE_ALPHA;};

KEYWORD_50 :  ('limit(')=> 'limit'| ('l')=> 'l' {$type = RULE_ALPHA;};

KEYWORD_41 : '=' (('le=')=> 'le=' | ('like=') => 'like=' {$type = KEYWORD_51;} | ('lt=')=> 'lt=' {$type = KEYWORD_42;} | 
('gt=')=> 'gt=' {$type = KEYWORD_40;} | ('ge=')=> 'ge=' {$type = KEYWORD_39;} | ('eq=')=> 'eq=' {$type = KEYWORD_38;} | ('ne=')=> 'ne=' {$type = KEYWORD_43;})?;

KEYWORD_42 : '=lt=' | '\u0328';	

KEYWORD_51 : '=like=' | '\uA733';

KEYWORD_39 : '=ge=' | '\uA734'; 	

KEYWORD_40 : '=gt=' | '\uA735';

KEYWORD_38 : '=eq=' | '\uA736';

KEYWORD_43 : '=ne=' | '\uA737';

KEYWORD_45 :  ('null(')=> 'null'| ('n')=> 'n' {$type = RULE_ALPHA;};

KEYWORD_46 :  ('sort(')=> 'sort'| ('s')=> 's' {$type = RULE_ALPHA;};

KEYWORD_47 :  ('true(')=> 'true'| ('t')=> 't' {$type = RULE_ALPHA;};

KEYWORD_35 : ('and(')=> 'and'| ('a')=> 'a' {$type = RULE_ALPHA;};

KEYWORD_36 : ('not(')=> 'not'| ('n')=> 'n' {$type = RULE_ALPHA;};

KEYWORD_37 :  ('out(')=> 'out'| ('o')=> 'o' {$type = RULE_ALPHA;};

KEYWORD_24 : '!=';

KEYWORD_25 : '<=';

KEYWORD_26 : '>=';

KEYWORD_27 :  ('eq(')=> 'eq'| ('e')=> 'e' {$type = RULE_ALPHA;};

KEYWORD_28 :  ('ge(')=> 'ge'| ('g')=> 'g' {$type = RULE_ALPHA;};

KEYWORD_29 :  ('gt(')=> 'gt'| ('g')=> 'g' {$type = RULE_ALPHA;};

KEYWORD_30 :  ('in(')=> 'in'| ('i')=> 'i' {$type = RULE_ALPHA;};

KEYWORD_44 : ('like(')=> 'like'| ('l')=> 'l' {$type = RULE_ALPHA;};

KEYWORD_31 :  ('le(')=> 'le'| ('l')=> 'l' {$type = RULE_ALPHA;};

KEYWORD_32 :  ('lt(')=> 'lt'| ('l')=> 'l' {$type = RULE_ALPHA;};

KEYWORD_33 :  ('ne(')=> 'ne'| ('n')=> 'n' {$type = RULE_ALPHA;};

KEYWORD_34 : ('or(')=> 'or'| ('o')=> 'o' {$type = RULE_ALPHA;};

KEYWORD_3 : '$';

KEYWORD_4 : '%';

KEYWORD_5 : '&';

KEYWORD_6 : '(';

KEYWORD_7 : ')';

KEYWORD_8 : '*';

KEYWORD_9 : '+';

KEYWORD_10 : ',';

KEYWORD_11 : '-';

KEYWORD_12 : '.';

KEYWORD_13 : '/';

KEYWORD_14 : ':';

KEYWORD_15 : ';';

KEYWORD_16 : '<';

KEYWORD_17 : '=' | '\u1234';

KEYWORD_18 : '>';

KEYWORD_19 : '?';

KEYWORD_20 : '@';

KEYWORD_21 : '_';

KEYWORD_22 : '|';

KEYWORD_23 : '~';


RULE_DIGIT : '0'..'9';

RULE_XDIGIT : (RULE_DIGIT|'A'..'F');

RULE_ALPHA : ('A'..'Z'|'a'..'z');

RULE_WSP : (' '|'\t');



