/*
* generated by Xtext
*/
grammar InternalRQL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.parallels.aps.ide.rqleditor.xtext.rql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.parallels.aps.ide.rqleditor.xtext.rql.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.parallels.aps.ide.rqleditor.xtext.rql.services.RQLGrammarAccess;

}

@parser::members {

 	private RQLGrammarAccess grammarAccess;
 	
    public InternalRQLParser(TokenStream input, RQLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected RQLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getOperandsHo_operandParserRuleCall_0_0()); 
	    }
		lv_operands_0_0=ruleHo_operand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"operands",
        		lv_operands_0_0, 
        		"Ho_operand");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getCommaKeyword_1_0_0());
    }

    |	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getAmpersandKeyword_1_0_1());
    }
)
    { 
        newCompositeNode(grammarAccess.getModelAccess().getHo_operandParserRuleCall_1_1()); 
    }
ruleHo_operand
    { 
        afterParserOrEnumRuleCall();
    }
)*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); } 
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current.getText(); }  
	 EOF 
;

// Rule And
ruleAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAndAccess().getAmpersandKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getAndAccess().getHo_operandParserRuleCall_1()); 
    }
    this_Ho_operand_1=ruleHo_operand    {
		$current.merge(this_Ho_operand_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleOr
entryRuleOr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); } 
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current.getText(); }  
	 EOF 
;

// Rule Or
ruleOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrAccess().getSemicolonKeyword_0_0()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrAccess().getVerticalLineKeyword_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getOrAccess().getHo_operandParserRuleCall_1()); 
    }
    this_Ho_operand_2=ruleHo_operand    {
		$current.merge(this_Ho_operand_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleHo_operand
entryRuleHo_operand returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHo_operandRule()); } 
	 iv_ruleHo_operand=ruleHo_operand 
	 { $current=$iv_ruleHo_operand.current.getText(); }  
	 EOF 
;

// Rule Ho_operand
ruleHo_operand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_WSP_0=RULE_WSP    {
		$current.merge(this_WSP_0);
    }

    { 
    newLeafNode(this_WSP_0, grammarAccess.getHo_operandAccess().getWSPTerminalRuleCall_0()); 
    }
)*(
    { 
        newCompositeNode(grammarAccess.getHo_operandAccess().getHigher_order_callParserRuleCall_1_0()); 
    }
    this_Higher_order_call_1=ruleHigher_order_call    {
		$current.merge(this_Higher_order_call_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHo_operandAccess().getCall_operatorParserRuleCall_1_1()); 
    }
    this_Call_operator_2=ruleCall_operator    {
		$current.merge(this_Call_operator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHo_operandAccess().getPredicateParserRuleCall_1_2()); 
    }
    this_Predicate_3=rulePredicate    {
		$current.merge(this_Predicate_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHo_operandAccess().getComparisonParserRuleCall_1_3()); 
    }
    this_Comparison_4=ruleComparison    {
		$current.merge(this_Comparison_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHo_operandAccess().getLeftParenthesisKeyword_1_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getHo_operandAccess().getHo_operandParserRuleCall_1_4_1()); 
    }
    this_Ho_operand_6=ruleHo_operand    {
		$current.merge(this_Ho_operand_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
    { 
        newCompositeNode(grammarAccess.getHo_operandAccess().getAndParserRuleCall_1_4_2_0()); 
    }
    this_And_7=ruleAnd    {
		$current.merge(this_And_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    |(
    { 
        newCompositeNode(grammarAccess.getHo_operandAccess().getOrParserRuleCall_1_4_2_1()); 
    }
    this_Or_8=ruleOr    {
		$current.merge(this_Or_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHo_operandAccess().getRightParenthesisKeyword_1_4_3()); 
    }
))(    this_WSP_10=RULE_WSP    {
		$current.merge(this_WSP_10);
    }

    { 
    newLeafNode(this_WSP_10, grammarAccess.getHo_operandAccess().getWSPTerminalRuleCall_2()); 
    }
)*)
    ;





// Entry rule entryRuleLogical_op_aliases
entryRuleLogical_op_aliases returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_op_aliasesRule()); } 
	 iv_ruleLogical_op_aliases=ruleLogical_op_aliases 
	 { $current=$iv_ruleLogical_op_aliases.current.getText(); }  
	 EOF 
;

// Rule Logical_op_aliases
ruleLogical_op_aliases returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogical_op_aliasesAccess().getOrKeyword_0()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogical_op_aliasesAccess().getAndKeyword_1()); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogical_op_aliasesAccess().getNotKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleHigher_order_call
entryRuleHigher_order_call returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHigher_order_callRule()); } 
	 iv_ruleHigher_order_call=ruleHigher_order_call 
	 { $current=$iv_ruleHigher_order_call.current.getText(); }  
	 EOF 
;

// Rule Higher_order_call
ruleHigher_order_call returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getHigher_order_callAccess().getLogical_op_aliasesParserRuleCall_0()); 
    }
    this_Logical_op_aliases_0=ruleLogical_op_aliases    {
		$current.merge(this_Logical_op_aliases_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_1=RULE_WSP    {
		$current.merge(this_WSP_1);
    }

    { 
    newLeafNode(this_WSP_1, grammarAccess.getHigher_order_callAccess().getWSPTerminalRuleCall_1()); 
    }
)*
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHigher_order_callAccess().getLeftParenthesisKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getHigher_order_callAccess().getHo_operandParserRuleCall_3_0()); 
    }
    this_Ho_operand_3=ruleHo_operand    {
		$current.merge(this_Ho_operand_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHigher_order_callAccess().getCommaKeyword_3_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getHigher_order_callAccess().getHo_operandParserRuleCall_3_1_1()); 
    }
    this_Ho_operand_5=ruleHo_operand    {
		$current.merge(this_Ho_operand_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHigher_order_callAccess().getRightParenthesisKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleBinary_op_aliases
entryRuleBinary_op_aliases returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinary_op_aliasesRule()); } 
	 iv_ruleBinary_op_aliases=ruleBinary_op_aliases 
	 { $current=$iv_ruleBinary_op_aliases.current.getText(); }  
	 EOF 
;

// Rule Binary_op_aliases
ruleBinary_op_aliases returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ne' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinary_op_aliasesAccess().getNeKeyword_0()); 
    }

    |
	kw='eq' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinary_op_aliasesAccess().getEqKeyword_1()); 
    }

    |
	kw='lt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinary_op_aliasesAccess().getLtKeyword_2()); 
    }

    |
	kw='le' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinary_op_aliasesAccess().getLeKeyword_3()); 
    }

    |
	kw='gt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinary_op_aliasesAccess().getGtKeyword_4()); 
    }

    |
	kw='ge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinary_op_aliasesAccess().getGeKeyword_5()); 
    }

    |
	kw='like' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinary_op_aliasesAccess().getLikeKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleComp_ops
entryRuleComp_ops returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getComp_opsRule()); } 
	 iv_ruleComp_ops=ruleComp_ops 
	 { $current=$iv_ruleComp_ops.current.getText(); }  
	 EOF 
;

// Rule Comp_ops
ruleComp_ops returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opsAccess().getExclamationMarkEqualsSignKeyword_0()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opsAccess().getEqualsSignKeyword_1()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opsAccess().getLessThanSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opsAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opsAccess().getGreaterThanSignKeyword_4()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opsAccess().getGreaterThanSignEqualsSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleComparison
entryRuleComparison returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); } 
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current.getText(); }  
	 EOF 
;

// Rule Comparison
ruleComparison returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getStrvalParserRuleCall_0()); 
    }
    this_Strval_0=ruleStrval    {
		$current.merge(this_Strval_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_1=RULE_WSP    {
		$current.merge(this_WSP_1);
    }

    { 
    newLeafNode(this_WSP_1, grammarAccess.getComparisonAccess().getWSPTerminalRuleCall_1()); 
    }
)*((
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparisonAccess().getEqualsSignKeyword_2_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getBinary_op_aliasesParserRuleCall_2_0_1()); 
    }
    this_Binary_op_aliases_3=ruleBinary_op_aliases    {
		$current.merge(this_Binary_op_aliases_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparisonAccess().getEqualsSignKeyword_2_0_2()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getComp_opsParserRuleCall_2_1()); 
    }
    this_Comp_ops_5=ruleComp_ops    {
		$current.merge(this_Comp_ops_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getPrimary_exprParserRuleCall_3()); 
    }
    this_Primary_expr_6=rulePrimary_expr    {
		$current.merge(this_Primary_expr_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleCall_operator
entryRuleCall_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCall_operatorRule()); } 
	 iv_ruleCall_operator=ruleCall_operator 
	 { $current=$iv_ruleCall_operator.current.getText(); }  
	 EOF 
;

// Rule Call_operator
ruleCall_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getCall_operatorAccess().getBinary_op_aliasesParserRuleCall_0_0()); 
    }
    this_Binary_op_aliases_0=ruleBinary_op_aliases    {
		$current.merge(this_Binary_op_aliases_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCall_operatorAccess().getFunctions_tblParserRuleCall_0_1()); 
    }
    this_Functions_tbl_1=ruleFunctions_tbl    {
		$current.merge(this_Functions_tbl_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(    this_WSP_2=RULE_WSP    {
		$current.merge(this_WSP_2);
    }

    { 
    newLeafNode(this_WSP_2, grammarAccess.getCall_operatorAccess().getWSPTerminalRuleCall_1()); 
    }
)*
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCall_operatorAccess().getLeftParenthesisKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getCall_operatorAccess().getPrimary_exprParserRuleCall_3_0()); 
    }
    this_Primary_expr_4=rulePrimary_expr    {
		$current.merge(this_Primary_expr_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCall_operatorAccess().getCommaKeyword_3_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCall_operatorAccess().getPrimary_exprParserRuleCall_3_1_1()); 
    }
    this_Primary_expr_6=rulePrimary_expr    {
		$current.merge(this_Primary_expr_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCall_operatorAccess().getRightParenthesisKeyword_4()); 
    }
)
    ;





// Entry rule entryRulePred_tbl
entryRulePred_tbl returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPred_tblRule()); } 
	 iv_rulePred_tbl=rulePred_tbl 
	 { $current=$iv_rulePred_tbl.current.getText(); }  
	 EOF 
;

// Rule Pred_tbl
rulePred_tbl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='select' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPred_tblAccess().getSelectKeyword_0()); 
    }

    |
	kw='sort' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPred_tblAccess().getSortKeyword_1()); 
    }

    |
	kw='limit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPred_tblAccess().getLimitKeyword_2()); 
    }

    |
	kw='implementing' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPred_tblAccess().getImplementingKeyword_3()); 
    }

    |
	kw='composing' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPred_tblAccess().getComposingKeyword_4()); 
    }
)
    ;





// Entry rule entryRulePredicate
entryRulePredicate returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateRule()); } 
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current.getText(); }  
	 EOF 
;

// Rule Predicate
rulePredicate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getPred_tblParserRuleCall_0()); 
    }
    this_Pred_tbl_0=rulePred_tbl    {
		$current.merge(this_Pred_tbl_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_1=RULE_WSP    {
		$current.merge(this_WSP_1);
    }

    { 
    newLeafNode(this_WSP_1, grammarAccess.getPredicateAccess().getWSPTerminalRuleCall_1()); 
    }
)*
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getPrimary_exprParserRuleCall_3_0()); 
    }
    this_Primary_expr_3=rulePrimary_expr    {
		$current.merge(this_Primary_expr_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredicateAccess().getCommaKeyword_3_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getPrimary_exprParserRuleCall_3_1_1()); 
    }
    this_Primary_expr_5=rulePrimary_expr    {
		$current.merge(this_Primary_expr_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4()); 
    }
)
    ;





// Entry rule entryRulePrimary_expr
entryRulePrimary_expr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimary_exprRule()); } 
	 iv_rulePrimary_expr=rulePrimary_expr 
	 { $current=$iv_rulePrimary_expr.current.getText(); }  
	 EOF 
;

// Rule Primary_expr
rulePrimary_expr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_WSP_0=RULE_WSP    {
		$current.merge(this_WSP_0);
    }

    { 
    newLeafNode(this_WSP_0, grammarAccess.getPrimary_exprAccess().getWSPTerminalRuleCall_0()); 
    }
)*((
    { 
        newCompositeNode(grammarAccess.getPrimary_exprAccess().getConst_func_tblParserRuleCall_1_0_0()); 
    }
    this_Const_func_tbl_1=ruleConst_func_tbl    {
		$current.merge(this_Const_func_tbl_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_2=RULE_WSP    {
		$current.merge(this_WSP_2);
    }

    { 
    newLeafNode(this_WSP_2, grammarAccess.getPrimary_exprAccess().getWSPTerminalRuleCall_1_0_1()); 
    }
)*
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimary_exprAccess().getLeftParenthesisKeyword_1_0_2()); 
    }
(    this_WSP_4=RULE_WSP    {
		$current.merge(this_WSP_4);
    }

    { 
    newLeafNode(this_WSP_4, grammarAccess.getPrimary_exprAccess().getWSPTerminalRuleCall_1_0_3()); 
    }
)*
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimary_exprAccess().getRightParenthesisKeyword_1_0_4()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimary_exprAccess().getArrayParserRuleCall_1_1()); 
    }
    this_Array_6=ruleArray    {
		$current.merge(this_Array_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimary_exprAccess().getStrvalParserRuleCall_1_2()); 
    }
    this_Strval_7=ruleStrval    {
		$current.merge(this_Strval_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(( RULE_WSP)=>    this_WSP_8=RULE_WSP    {
		$current.merge(this_WSP_8);
    }

    { 
    newLeafNode(this_WSP_8, grammarAccess.getPrimary_exprAccess().getWSPTerminalRuleCall_2()); 
    }
)*)
    ;





// Entry rule entryRuleFunctions_tbl
entryRuleFunctions_tbl returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctions_tblRule()); } 
	 iv_ruleFunctions_tbl=ruleFunctions_tbl 
	 { $current=$iv_ruleFunctions_tbl.current.getText(); }  
	 EOF 
;

// Rule Functions_tbl
ruleFunctions_tbl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='isnull' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctions_tblAccess().getIsnullKeyword_0()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctions_tblAccess().getInKeyword_1()); 
    }

    |
	kw='out' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctions_tblAccess().getOutKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleConst_func_tbl
entryRuleConst_func_tbl returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConst_func_tblRule()); } 
	 iv_ruleConst_func_tbl=ruleConst_func_tbl 
	 { $current=$iv_ruleConst_func_tbl.current.getText(); }  
	 EOF 
;

// Rule Const_func_tbl
ruleConst_func_tbl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConst_func_tblAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConst_func_tblAccess().getFalseKeyword_1()); 
    }

    |
	kw='empty' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConst_func_tblAccess().getEmptyKeyword_2()); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConst_func_tblAccess().getNullKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleArray
entryRuleArray returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); } 
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current.getText(); }  
	 EOF 
;

// Rule Array
ruleArray returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayAccess().getLeftParenthesisKeyword_0()); 
    }
(    this_WSP_1=RULE_WSP    {
		$current.merge(this_WSP_1);
    }

    { 
    newLeafNode(this_WSP_1, grammarAccess.getArrayAccess().getWSPTerminalRuleCall_1()); 
    }
)*
    { 
        newCompositeNode(grammarAccess.getArrayAccess().getStrvalParserRuleCall_2()); 
    }
    this_Strval_2=ruleStrval    {
		$current.merge(this_Strval_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_3=RULE_WSP    {
		$current.merge(this_WSP_3);
    }

    { 
    newLeafNode(this_WSP_3, grammarAccess.getArrayAccess().getWSPTerminalRuleCall_3()); 
    }
)*(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayAccess().getCommaKeyword_4_0()); 
    }
(    this_WSP_5=RULE_WSP    {
		$current.merge(this_WSP_5);
    }

    { 
    newLeafNode(this_WSP_5, grammarAccess.getArrayAccess().getWSPTerminalRuleCall_4_1()); 
    }
)*
    { 
        newCompositeNode(grammarAccess.getArrayAccess().getStrvalParserRuleCall_4_2()); 
    }
    this_Strval_6=ruleStrval    {
		$current.merge(this_Strval_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_7=RULE_WSP    {
		$current.merge(this_WSP_7);
    }

    { 
    newLeafNode(this_WSP_7, grammarAccess.getArrayAccess().getWSPTerminalRuleCall_4_3()); 
    }
)*)*
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayAccess().getRightParenthesisKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleNchar
entryRuleNchar returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNcharRule()); } 
	 iv_ruleNchar=ruleNchar 
	 { $current=$iv_ruleNchar.current.getText(); }  
	 EOF 
;

// Rule Nchar
ruleNchar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ALPHA_0=RULE_ALPHA    {
		$current.merge(this_ALPHA_0);
    }

    { 
    newLeafNode(this_ALPHA_0, grammarAccess.getNcharAccess().getALPHATerminalRuleCall_0()); 
    }

    |    this_DIGIT_1=RULE_DIGIT    {
		$current.merge(this_DIGIT_1);
    }

    { 
    newLeafNode(this_DIGIT_1, grammarAccess.getNcharAccess().getDIGITTerminalRuleCall_1()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getHyphenMinusKeyword_2()); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getFullStopKeyword_3()); 
    }

    |
	kw='_' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().get_Keyword_4()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getTildeKeyword_5()); 
    }

    |
	kw='$' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getDollarSignKeyword_6()); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getColonKeyword_7()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getAsteriskKeyword_8()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getPlusSignKeyword_9()); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getQuestionMarkKeyword_10()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getSolidusKeyword_11()); 
    }

    |
	kw='@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getCommercialAtKeyword_12()); 
    }
)
    ;





// Entry rule entryRulePct_encoded
entryRulePct_encoded returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPct_encodedRule()); } 
	 iv_rulePct_encoded=rulePct_encoded 
	 { $current=$iv_rulePct_encoded.current.getText(); }  
	 EOF 
;

// Rule Pct_encoded
rulePct_encoded returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPct_encodedAccess().getPercentSignKeyword_0()); 
    }
    this_XDIGIT_1=RULE_XDIGIT    {
		$current.merge(this_XDIGIT_1);
    }

    { 
    newLeafNode(this_XDIGIT_1, grammarAccess.getPct_encodedAccess().getXDIGITTerminalRuleCall_1()); 
    }
    this_XDIGIT_2=RULE_XDIGIT    {
		$current.merge(this_XDIGIT_2);
    }

    { 
    newLeafNode(this_XDIGIT_2, grammarAccess.getPct_encodedAccess().getXDIGITTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleStrval
entryRuleStrval returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStrvalRule()); } 
	 iv_ruleStrval=ruleStrval 
	 { $current=$iv_ruleStrval.current.getText(); }  
	 EOF 
;

// Rule Strval
ruleStrval returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStrvalAccess().getQuotationMarkKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getStrvalAccess().getNcharParserRuleCall_1_0()); 
    }
    this_Nchar_1=ruleNchar    {
		$current.merge(this_Nchar_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStrvalAccess().getPct_encodedParserRuleCall_1_1()); 
    }
    this_Pct_encoded_2=rulePct_encoded    {
		$current.merge(this_Pct_encoded_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStrvalAccess().getQuotationMarkKeyword_2()); 
    }
)
    ;





RULE_ALPHA : ('A'..'Z'|'a'..'z');

RULE_DIGIT : '0'..'9';

RULE_XDIGIT : (RULE_DIGIT|'A'..'F');

RULE_WSP : (' '|'\t');


