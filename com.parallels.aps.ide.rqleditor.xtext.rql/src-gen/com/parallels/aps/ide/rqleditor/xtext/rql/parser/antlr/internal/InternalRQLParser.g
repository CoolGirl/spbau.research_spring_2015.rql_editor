/*
* generated by Xtext
*/
parser grammar InternalRQLParser;

options {
	tokenVocab=InternalRQLLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package com.parallels.aps.ide.rqleditor.xtext.rql.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.parallels.aps.ide.rqleditor.xtext.rql.services.RQLGrammarAccess;

}

@members {


	private RQLGrammarAccess grammarAccess;
	 	
	public InternalRQLParser(TokenStream input, RQLGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Model";	
	} 
	   	   	
	@Override
	protected RQLGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getOperandsHoOperandParserRuleCall_0_0()); 
	    }
		lv_operands_0_0=ruleHoOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"operands",
        		lv_operands_0_0, 
        		"HoOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)((
	otherlv_1=KEYWORD_10
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getCommaKeyword_1_0_0());
    }

    |
	otherlv_2=KEYWORD_5
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getAmpersandKeyword_1_0_1());
    }
)
    { 
        newCompositeNode(grammarAccess.getModelAccess().getHoOperandParserRuleCall_1_1()); 
    }
ruleHoOperand
    {
        afterParserOrEnumRuleCall();
    }
)*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAndRule()); } 
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current.getText(); }  
	 EOF 
;

// Rule And
ruleAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_5 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAndAccess().getAmpersandKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getAndAccess().getHoOperandParserRuleCall_1()); 
    }
    this_HoOperand_1=ruleHoOperand    {
		$current.merge(this_HoOperand_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleOr
entryRuleOr returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOrRule()); } 
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current.getText(); }  
	 EOF 
;

// Rule Or
ruleOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_15 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrAccess().getSemicolonKeyword_0_0()); 
    }

    |
	kw=KEYWORD_22 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrAccess().getVerticalLineKeyword_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getOrAccess().getHoOperandParserRuleCall_1()); 
    }
    this_HoOperand_2=ruleHoOperand    {
		$current.merge(this_HoOperand_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleHoOperand
entryRuleHoOperand returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getHoOperandRule()); } 
	 iv_ruleHoOperand=ruleHoOperand 
	 { $current=$iv_ruleHoOperand.current.getText(); }  
	 EOF 
;

// Rule HoOperand
ruleHoOperand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_WSP_0=RULE_WSP    {
		$current.merge(this_WSP_0);
    }

    { 
    newLeafNode(this_WSP_0, grammarAccess.getHoOperandAccess().getWSPTerminalRuleCall_0()); 
    }
)*(
    { 
        newCompositeNode(grammarAccess.getHoOperandAccess().getHigherOrderCallParserRuleCall_1_0()); 
    }
    this_HigherOrderCall_1=ruleHigherOrderCall    {
		$current.merge(this_HigherOrderCall_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHoOperandAccess().getCallOperatorParserRuleCall_1_1()); 
    }
    this_CallOperator_2=ruleCallOperator    {
		$current.merge(this_CallOperator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHoOperandAccess().getPredicateParserRuleCall_1_2()); 
    }
    this_Predicate_3=rulePredicate    {
		$current.merge(this_Predicate_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHoOperandAccess().getComparisonParserRuleCall_1_3()); 
    }
    this_Comparison_4=ruleComparison    {
		$current.merge(this_Comparison_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw=KEYWORD_6 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHoOperandAccess().getLeftParenthesisKeyword_1_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getHoOperandAccess().getHoOperandParserRuleCall_1_4_1()); 
    }
    this_HoOperand_6=ruleHoOperand    {
		$current.merge(this_HoOperand_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getHoOperandAccess().getAndParserRuleCall_1_4_2_0()); 
    }
    this_And_7=ruleAnd    {
		$current.merge(this_And_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHoOperandAccess().getOrParserRuleCall_1_4_2_1()); 
    }
    this_Or_8=ruleOr    {
		$current.merge(this_Or_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHoOperandAccess().getRightParenthesisKeyword_1_4_3()); 
    }
))?(    this_WSP_10=RULE_WSP    {
		$current.merge(this_WSP_10);
    }

    { 
    newLeafNode(this_WSP_10, grammarAccess.getHoOperandAccess().getWSPTerminalRuleCall_2()); 
    }
)*(
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHoOperandAccess().getControl000dKeyword_3()); 
    }
)?(
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHoOperandAccess().getControl000aKeyword_4()); 
    }
)?)
    ;





// Entry rule entryRuleHigherOrderCall
entryRuleHigherOrderCall returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getHigherOrderCallRule()); } 
	 iv_ruleHigherOrderCall=ruleHigherOrderCall 
	 { $current=$iv_ruleHigherOrderCall.current.getText(); }  
	 EOF 
;

// Rule HigherOrderCall
ruleHigherOrderCall returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getHigherOrderCallAccess().getLogicalOpAliasesParserRuleCall_0()); 
    }
    this_LogicalOpAliases_0=ruleLogicalOpAliases    {
		$current.merge(this_LogicalOpAliases_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_1=RULE_WSP    {
		$current.merge(this_WSP_1);
    }

    { 
    newLeafNode(this_WSP_1, grammarAccess.getHigherOrderCallAccess().getWSPTerminalRuleCall_1()); 
    }
)*
	kw=KEYWORD_6 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHigherOrderCallAccess().getLeftParenthesisKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getHigherOrderCallAccess().getHoOperandParserRuleCall_3_0()); 
    }
    this_HoOperand_3=ruleHoOperand    {
		$current.merge(this_HoOperand_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHigherOrderCallAccess().getCommaKeyword_3_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getHigherOrderCallAccess().getHoOperandParserRuleCall_3_1_1()); 
    }
    this_HoOperand_5=ruleHoOperand    {
		$current.merge(this_HoOperand_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHigherOrderCallAccess().getRightParenthesisKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleBinaryOpAliasesWithEqualsSign
entryRuleBinaryOpAliasesWithEqualsSign returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getBinaryOpAliasesWithEqualsSignRule()); } 
	 iv_ruleBinaryOpAliasesWithEqualsSign=ruleBinaryOpAliasesWithEqualsSign 
	 { $current=$iv_ruleBinaryOpAliasesWithEqualsSign.current.getText(); }  
	 EOF 
;

// Rule BinaryOpAliasesWithEqualsSign
ruleBinaryOpAliasesWithEqualsSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_43 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesWithEqualsSignAccess().getNeKeyword_0()); 
    }

    |
	kw=KEYWORD_38 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesWithEqualsSignAccess().getEqKeyword_1()); 
    }

    |
	kw=KEYWORD_42 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesWithEqualsSignAccess().getLtKeyword_2()); 
    }

    |
	kw=KEYWORD_41 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesWithEqualsSignAccess().getLeKeyword_3()); 
    }

    |
	kw=KEYWORD_40 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesWithEqualsSignAccess().getGtKeyword_4()); 
    }

    |
	kw=KEYWORD_39 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesWithEqualsSignAccess().getGeKeyword_5()); 
    }

    |
	kw=KEYWORD_51 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesWithEqualsSignAccess().getLikeKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleBinaryOpAliases
entryRuleBinaryOpAliases returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getBinaryOpAliasesRule()); } 
	 iv_ruleBinaryOpAliases=ruleBinaryOpAliases 
	 { $current=$iv_ruleBinaryOpAliases.current.getText(); }  
	 EOF 
;

// Rule BinaryOpAliases
ruleBinaryOpAliases returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_33 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesAccess().getNeKeyword_0()); 
    }

    |
	kw=KEYWORD_27 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesAccess().getEqKeyword_1()); 
    }

    |
	kw=KEYWORD_32 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesAccess().getLtKeyword_2()); 
    }

    |
	kw=KEYWORD_31 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesAccess().getLeKeyword_3()); 
    }

    |
	kw=KEYWORD_29 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesAccess().getGtKeyword_4()); 
    }

    |
	kw=KEYWORD_28 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesAccess().getGeKeyword_5()); 
    }

    |
	kw=KEYWORD_44 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOpAliasesAccess().getLikeKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleCompOps
entryRuleCompOps returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCompOpsRule()); } 
	 iv_ruleCompOps=ruleCompOps 
	 { $current=$iv_ruleCompOps.current.getText(); }  
	 EOF 
;

// Rule CompOps
ruleCompOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_24 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompOpsAccess().getExclamationMarkEqualsSignKeyword_0()); 
    }

    |
	kw=KEYWORD_17 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompOpsAccess().getEqualsSignKeyword_1()); 
    }

    |
	kw=KEYWORD_16 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompOpsAccess().getLessThanSignKeyword_2()); 
    }

    |
	kw=KEYWORD_25 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompOpsAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw=KEYWORD_18 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompOpsAccess().getGreaterThanSignKeyword_4()); 
    }

    |
	kw=KEYWORD_26 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompOpsAccess().getGreaterThanSignEqualsSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleComparison
entryRuleComparison returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getComparisonRule()); } 
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current.getText(); }  
	 EOF 
;

// Rule Comparison
ruleComparison returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getStrvalParserRuleCall_0()); 
    }
    this_Strval_0=ruleStrval    {
		$current.merge(this_Strval_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_1=RULE_WSP    {
		$current.merge(this_WSP_1);
    }

    { 
    newLeafNode(this_WSP_1, grammarAccess.getComparisonAccess().getWSPTerminalRuleCall_1()); 
    }
)*(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getBinaryOpAliasesWithEqualsSignParserRuleCall_2_0()); 
    }
    this_BinaryOpAliasesWithEqualsSign_2=ruleBinaryOpAliasesWithEqualsSign    {
		$current.merge(this_BinaryOpAliasesWithEqualsSign_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getCompOpsParserRuleCall_2_1()); 
    }
    this_CompOps_3=ruleCompOps    {
		$current.merge(this_CompOps_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getPrimaryExprParserRuleCall_3()); 
    }
    this_PrimaryExpr_4=rulePrimaryExpr    {
		$current.merge(this_PrimaryExpr_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleCallOperator
entryRuleCallOperator returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCallOperatorRule()); } 
	 iv_ruleCallOperator=ruleCallOperator 
	 { $current=$iv_ruleCallOperator.current.getText(); }  
	 EOF 
;

// Rule CallOperator
ruleCallOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
    { 
        newCompositeNode(grammarAccess.getCallOperatorAccess().getBinaryOpAliasesParserRuleCall_0_0()); 
    }
    this_BinaryOpAliases_0=ruleBinaryOpAliases    {
		$current.merge(this_BinaryOpAliases_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallOperatorAccess().getFunctionsTblParserRuleCall_0_1()); 
    }
    this_FunctionsTbl_1=ruleFunctionsTbl    {
		$current.merge(this_FunctionsTbl_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(    this_WSP_2=RULE_WSP    {
		$current.merge(this_WSP_2);
    }

    { 
    newLeafNode(this_WSP_2, grammarAccess.getCallOperatorAccess().getWSPTerminalRuleCall_1()); 
    }
)*
	kw=KEYWORD_6 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallOperatorAccess().getLeftParenthesisKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getCallOperatorAccess().getPrimaryExprParserRuleCall_3_0()); 
    }
    this_PrimaryExpr_4=rulePrimaryExpr    {
		$current.merge(this_PrimaryExpr_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallOperatorAccess().getCommaKeyword_3_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCallOperatorAccess().getPrimaryExprParserRuleCall_3_1_1()); 
    }
    this_PrimaryExpr_6=rulePrimaryExpr    {
		$current.merge(this_PrimaryExpr_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)?
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallOperatorAccess().getRightParenthesisKeyword_4()); 
    }
)
    ;





// Entry rule entryRulePredicate
entryRulePredicate returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPredicateRule()); } 
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current.getText(); }  
	 EOF 
;

// Rule Predicate
rulePredicate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getPredTblParserRuleCall_0()); 
    }
    this_PredTbl_0=rulePredTbl    {
		$current.merge(this_PredTbl_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_1=RULE_WSP    {
		$current.merge(this_WSP_1);
    }

    { 
    newLeafNode(this_WSP_1, grammarAccess.getPredicateAccess().getWSPTerminalRuleCall_1()); 
    }
)*
	kw=KEYWORD_6 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getPrimaryExprParserRuleCall_3_0()); 
    }
    this_PrimaryExpr_3=rulePrimaryExpr    {
		$current.merge(this_PrimaryExpr_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredicateAccess().getCommaKeyword_3_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPredicateAccess().getPrimaryExprParserRuleCall_3_1_1()); 
    }
    this_PrimaryExpr_5=rulePrimaryExpr    {
		$current.merge(this_PrimaryExpr_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)?
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4()); 
    }
)
    ;





// Entry rule entryRulePredTbl
entryRulePredTbl returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPredTblRule()); } 
	 iv_rulePredTbl=rulePredTbl 
	 { $current=$iv_rulePredTbl.current.getText(); }  
	 EOF 
;

// Rule PredTbl
rulePredTbl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_53 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredTblAccess().getSelectKeyword_0()); 
    }

    |
	kw=KEYWORD_46 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredTblAccess().getSortKeyword_1()); 
    }

    |
	kw=KEYWORD_50 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredTblAccess().getLimitKeyword_2()); 
    }

    |
	kw=KEYWORD_55 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredTblAccess().getImplementingKeyword_3()); 
    }

    |
	kw=KEYWORD_54 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredTblAccess().getComposingKeyword_4()); 
    }
)
    ;





// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); } 
	 iv_rulePrimaryExpr=rulePrimaryExpr 
	 { $current=$iv_rulePrimaryExpr.current.getText(); }  
	 EOF 
;

// Rule PrimaryExpr
rulePrimaryExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_WSP_0=RULE_WSP    {
		$current.merge(this_WSP_0);
    }

    { 
    newLeafNode(this_WSP_0, grammarAccess.getPrimaryExprAccess().getWSPTerminalRuleCall_0()); 
    }
)*((
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getConstFuncTblParserRuleCall_1_0_0()); 
    }
    this_ConstFuncTbl_1=ruleConstFuncTbl    {
		$current.merge(this_ConstFuncTbl_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_2=RULE_WSP    {
		$current.merge(this_WSP_2);
    }

    { 
    newLeafNode(this_WSP_2, grammarAccess.getPrimaryExprAccess().getWSPTerminalRuleCall_1_0_1()); 
    }
)*
	kw=KEYWORD_6 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_1_0_2()); 
    }
(    this_WSP_4=RULE_WSP    {
		$current.merge(this_WSP_4);
    }

    { 
    newLeafNode(this_WSP_4, grammarAccess.getPrimaryExprAccess().getWSPTerminalRuleCall_1_0_3()); 
    }
)*
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryExprAccess().getRightParenthesisKeyword_1_0_4()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getArrayParserRuleCall_1_1()); 
    }
    this_Array_6=ruleArray    {
		$current.merge(this_Array_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getStrvalParserRuleCall_1_2()); 
    }
    this_Strval_7=ruleStrval    {
		$current.merge(this_Strval_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)((RULE_WSP)=>    this_WSP_8=RULE_WSP    {
		$current.merge(this_WSP_8);
    }

    { 
    newLeafNode(this_WSP_8, grammarAccess.getPrimaryExprAccess().getWSPTerminalRuleCall_2()); 
    }
)*)
    ;





// Entry rule entryRuleFunctionsTbl
entryRuleFunctionsTbl returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFunctionsTblRule()); } 
	 iv_ruleFunctionsTbl=ruleFunctionsTbl 
	 { $current=$iv_ruleFunctionsTbl.current.getText(); }  
	 EOF 
;

// Rule FunctionsTbl
ruleFunctionsTbl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_52 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionsTblAccess().getIsnullKeyword_0()); 
    }

    |
	kw=KEYWORD_30 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionsTblAccess().getInKeyword_1()); 
    }

    |
	kw=KEYWORD_37 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionsTblAccess().getOutKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleConstFuncTbl
entryRuleConstFuncTbl returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getConstFuncTblRule()); } 
	 iv_ruleConstFuncTbl=ruleConstFuncTbl 
	 { $current=$iv_ruleConstFuncTbl.current.getText(); }  
	 EOF 
;

// Rule ConstFuncTbl
ruleConstFuncTbl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_47 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstFuncTblAccess().getTrueKeyword_0()); 
    }

    |
	kw=KEYWORD_49 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstFuncTblAccess().getFalseKeyword_1()); 
    }

    |
	kw=KEYWORD_48 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstFuncTblAccess().getEmptyKeyword_2()); 
    }

    |
	kw=KEYWORD_45 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstFuncTblAccess().getNullKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleArray
entryRuleArray returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getArrayRule()); } 
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current.getText(); }  
	 EOF 
;

// Rule Array
ruleArray returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_6 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayAccess().getLeftParenthesisKeyword_0()); 
    }
(    this_WSP_1=RULE_WSP    {
		$current.merge(this_WSP_1);
    }

    { 
    newLeafNode(this_WSP_1, grammarAccess.getArrayAccess().getWSPTerminalRuleCall_1()); 
    }
)*
    { 
        newCompositeNode(grammarAccess.getArrayAccess().getStrvalParserRuleCall_2()); 
    }
    this_Strval_2=ruleStrval    {
		$current.merge(this_Strval_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_3=RULE_WSP    {
		$current.merge(this_WSP_3);
    }

    { 
    newLeafNode(this_WSP_3, grammarAccess.getArrayAccess().getWSPTerminalRuleCall_3()); 
    }
)*(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayAccess().getCommaKeyword_4_0()); 
    }
(    this_WSP_5=RULE_WSP    {
		$current.merge(this_WSP_5);
    }

    { 
    newLeafNode(this_WSP_5, grammarAccess.getArrayAccess().getWSPTerminalRuleCall_4_1()); 
    }
)*
    { 
        newCompositeNode(grammarAccess.getArrayAccess().getStrvalParserRuleCall_4_2()); 
    }
    this_Strval_6=ruleStrval    {
		$current.merge(this_Strval_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_WSP_7=RULE_WSP    {
		$current.merge(this_WSP_7);
    }

    { 
    newLeafNode(this_WSP_7, grammarAccess.getArrayAccess().getWSPTerminalRuleCall_4_3()); 
    }
)*)*
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayAccess().getRightParenthesisKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleNchar
entryRuleNchar returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNcharRule()); } 
	 iv_ruleNchar=ruleNchar 
	 { $current=$iv_ruleNchar.current.getText(); }  
	 EOF 
;

// Rule Nchar
ruleNchar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ALPHA_0=RULE_ALPHA    {
		$current.merge(this_ALPHA_0);
    }

    { 
    newLeafNode(this_ALPHA_0, grammarAccess.getNcharAccess().getALPHATerminalRuleCall_0()); 
    }

    |    this_DIGIT_1=RULE_DIGIT    {
		$current.merge(this_DIGIT_1);
    }

    { 
    newLeafNode(this_DIGIT_1, grammarAccess.getNcharAccess().getDIGITTerminalRuleCall_1()); 
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getHyphenMinusKeyword_2()); 
    }

    |
	kw=KEYWORD_12 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getFullStopKeyword_3()); 
    }

    |
	kw=KEYWORD_21 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().get_Keyword_4()); 
    }

    |
	kw=KEYWORD_23 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getTildeKeyword_5()); 
    }

    |
	kw=KEYWORD_3 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getDollarSignKeyword_6()); 
    }

    |
	kw=KEYWORD_14 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getColonKeyword_7()); 
    }

    |
	kw=KEYWORD_8 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getAsteriskKeyword_8()); 
    }

    |
	kw=KEYWORD_9 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getPlusSignKeyword_9()); 
    }

    |
	kw=KEYWORD_19 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getQuestionMarkKeyword_10()); 
    }

    |
	kw=KEYWORD_13 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getSolidusKeyword_11()); 
    }

    |
	kw=KEYWORD_20 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNcharAccess().getCommercialAtKeyword_12()); 
    }
)
    ;





// Entry rule entryRulePct_encoded
entryRulePct_encoded returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPct_encodedRule()); } 
	 iv_rulePct_encoded=rulePct_encoded 
	 { $current=$iv_rulePct_encoded.current.getText(); }  
	 EOF 
;

// Rule Pct_encoded
rulePct_encoded returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPct_encodedAccess().getPercentSignKeyword_0()); 
    }
    this_XDIGIT_1=RULE_XDIGIT    {
		$current.merge(this_XDIGIT_1);
    }

    { 
    newLeafNode(this_XDIGIT_1, grammarAccess.getPct_encodedAccess().getXDIGITTerminalRuleCall_1()); 
    }
    this_XDIGIT_2=RULE_XDIGIT    {
		$current.merge(this_XDIGIT_2);
    }

    { 
    newLeafNode(this_XDIGIT_2, grammarAccess.getPct_encodedAccess().getXDIGITTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleStrval
entryRuleStrval returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getStrvalRule()); } 
	 iv_ruleStrval=ruleStrval 
	 { $current=$iv_ruleStrval.current.getText(); }  
	 EOF 
;

// Rule Strval
ruleStrval returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getStrvalAccess().getNcharParserRuleCall_0()); 
    }
    this_Nchar_0=ruleNchar    {
		$current.merge(this_Nchar_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStrvalAccess().getPct_encodedParserRuleCall_1()); 
    }
    this_Pct_encoded_1=rulePct_encoded    {
		$current.merge(this_Pct_encoded_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;





// Entry rule entryRuleLogicalOpAliases
entryRuleLogicalOpAliases returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getLogicalOpAliasesRule()); } 
	 iv_ruleLogicalOpAliases=ruleLogicalOpAliases 
	 { $current=$iv_ruleLogicalOpAliases.current.getText(); }  
	 EOF 
;

// Rule LogicalOpAliases
ruleLogicalOpAliases returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_34 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOpAliasesAccess().getOrKeyword_0()); 
    }

    |
	kw=KEYWORD_35 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOpAliasesAccess().getAndKeyword_1()); 
    }

    |
	kw=KEYWORD_36 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOpAliasesAccess().getNotKeyword_2()); 
    }
)
    ;





