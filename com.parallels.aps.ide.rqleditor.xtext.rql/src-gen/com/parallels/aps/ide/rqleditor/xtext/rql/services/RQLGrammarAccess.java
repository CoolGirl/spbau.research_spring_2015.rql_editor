/*
* generated by Xtext
*/
package com.parallels.aps.ide.rqleditor.xtext.rql.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class RQLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsHo_operandParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cHo_operandParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Model:
		//	operands+=Ho_operand (("," | "&") Ho_operand)*;
		public ParserRule getRule() { return rule; }

		//operands+=Ho_operand (("," | "&") Ho_operand)*
		public Group getGroup() { return cGroup; }

		//operands+=Ho_operand
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }

		//Ho_operand
		public RuleCall getOperandsHo_operandParserRuleCall_0_0() { return cOperandsHo_operandParserRuleCall_0_0; }

		//(("," | "&") Ho_operand)*
		public Group getGroup_1() { return cGroup_1; }

		//"," | "&"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//","
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_0_1() { return cAmpersandKeyword_1_0_1; }

		//Ho_operand
		public RuleCall getHo_operandParserRuleCall_1_1() { return cHo_operandParserRuleCall_1_1; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cHo_operandParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//And:
		//	"&" Ho_operand;
		public ParserRule getRule() { return rule; }

		//"&" Ho_operand
		public Group getGroup() { return cGroup; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//Ho_operand
		public RuleCall getHo_operandParserRuleCall_1() { return cHo_operandParserRuleCall_1; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cHo_operandParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Or:
		//	(";" | "|") Ho_operand;
		public ParserRule getRule() { return rule; }

		//(";" | "|") Ho_operand
		public Group getGroup() { return cGroup; }

		//";" | "|"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//";"
		public Keyword getSemicolonKeyword_0_0() { return cSemicolonKeyword_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_0_1() { return cVerticalLineKeyword_0_1; }

		//Ho_operand
		public RuleCall getHo_operandParserRuleCall_1() { return cHo_operandParserRuleCall_1; }
	}

	public class Ho_operandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ho_operand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSPTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cHigher_order_callParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cCall_operatorParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cPredicateParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cComparisonParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final RuleCall cHo_operandParserRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		private final Alternatives cAlternatives_1_4_2 = (Alternatives)cGroup_1_4.eContents().get(2);
		private final RuleCall cAndParserRuleCall_1_4_2_0 = (RuleCall)cAlternatives_1_4_2.eContents().get(0);
		private final RuleCall cOrParserRuleCall_1_4_2_1 = (RuleCall)cAlternatives_1_4_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_4_3 = (Keyword)cGroup_1_4.eContents().get(3);
		private final RuleCall cWSPTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Ho_operand:
		//	WSP* (Higher_order_call | Call_operator | Predicate | Comparison | "(" Ho_operand (And+ | Or+) ")") WSP*;
		public ParserRule getRule() { return rule; }

		//WSP* (Higher_order_call | Call_operator | Predicate | Comparison | "(" Ho_operand (And+ | Or+) ")") WSP*
		public Group getGroup() { return cGroup; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_0() { return cWSPTerminalRuleCall_0; }

		//Higher_order_call | Call_operator | Predicate | Comparison | "(" Ho_operand (And+ | Or+) ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//Higher_order_call
		public RuleCall getHigher_order_callParserRuleCall_1_0() { return cHigher_order_callParserRuleCall_1_0; }

		//Call_operator
		public RuleCall getCall_operatorParserRuleCall_1_1() { return cCall_operatorParserRuleCall_1_1; }

		//Predicate
		public RuleCall getPredicateParserRuleCall_1_2() { return cPredicateParserRuleCall_1_2; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_1_3() { return cComparisonParserRuleCall_1_3; }

		//"(" Ho_operand (And+ | Or+) ")"
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_4_0() { return cLeftParenthesisKeyword_1_4_0; }

		//Ho_operand
		public RuleCall getHo_operandParserRuleCall_1_4_1() { return cHo_operandParserRuleCall_1_4_1; }

		//And+ | Or+
		public Alternatives getAlternatives_1_4_2() { return cAlternatives_1_4_2; }

		//And+
		public RuleCall getAndParserRuleCall_1_4_2_0() { return cAndParserRuleCall_1_4_2_0; }

		//Or+
		public RuleCall getOrParserRuleCall_1_4_2_1() { return cOrParserRuleCall_1_4_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4_3() { return cRightParenthesisKeyword_1_4_3; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_2() { return cWSPTerminalRuleCall_2; }
	}

	public class Logical_op_aliasesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Logical_op_aliases");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNotKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Logical_op_aliases:
		//	"or" | "and" | "not";
		public ParserRule getRule() { return rule; }

		//"or" | "and" | "not"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"or"
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }

		//"and"
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }

		//"not"
		public Keyword getNotKeyword_2() { return cNotKeyword_2; }
	}

	public class Higher_order_callElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Higher_order_call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_op_aliasesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWSPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cHo_operandParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cHo_operandParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Higher_order_call:
		//	Logical_op_aliases WSP* "(" (Ho_operand ("," Ho_operand)*) ")";
		public ParserRule getRule() { return rule; }

		//Logical_op_aliases WSP* "(" (Ho_operand ("," Ho_operand)*) ")"
		public Group getGroup() { return cGroup; }

		//Logical_op_aliases
		public RuleCall getLogical_op_aliasesParserRuleCall_0() { return cLogical_op_aliasesParserRuleCall_0; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_1() { return cWSPTerminalRuleCall_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//Ho_operand ("," Ho_operand)*
		public Group getGroup_3() { return cGroup_3; }

		//Ho_operand
		public RuleCall getHo_operandParserRuleCall_3_0() { return cHo_operandParserRuleCall_3_0; }

		//("," Ho_operand)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//Ho_operand
		public RuleCall getHo_operandParserRuleCall_3_1_1() { return cHo_operandParserRuleCall_3_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class Binary_op_aliasesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binary_op_aliases");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLtKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGtKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLikeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//Binary_op_aliases:
		//	"ne" | "eq" | "lt" | "le" | "gt" | "ge" | "like";
		public ParserRule getRule() { return rule; }

		//"ne" | "eq" | "lt" | "le" | "gt" | "ge" | "like"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ne"
		public Keyword getNeKeyword_0() { return cNeKeyword_0; }

		//"eq"
		public Keyword getEqKeyword_1() { return cEqKeyword_1; }

		//"lt"
		public Keyword getLtKeyword_2() { return cLtKeyword_2; }

		//"le"
		public Keyword getLeKeyword_3() { return cLeKeyword_3; }

		//"gt"
		public Keyword getGtKeyword_4() { return cGtKeyword_4; }

		//"ge"
		public Keyword getGeKeyword_5() { return cGeKeyword_5; }

		//"like"
		public Keyword getLikeKeyword_6() { return cLikeKeyword_6; }
	}

	public class Comp_opsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comp_ops");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Comp_ops:
		//	"!=" | "=" | "<" | "<=" | ">" | ">=";
		public ParserRule getRule() { return rule; }

		//"!=" | "=" | "<" | "<=" | ">" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_0() { return cExclamationMarkEqualsSignKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStrvalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWSPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cBinary_op_aliasesParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final RuleCall cComp_opsParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cPrimary_exprParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Comparison:
		//	Strval WSP* ("=" Binary_op_aliases "=" | Comp_ops) Primary_expr;
		public ParserRule getRule() { return rule; }

		//Strval WSP* ("=" Binary_op_aliases "=" | Comp_ops) Primary_expr
		public Group getGroup() { return cGroup; }

		//Strval
		public RuleCall getStrvalParserRuleCall_0() { return cStrvalParserRuleCall_0; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_1() { return cWSPTerminalRuleCall_1; }

		//"=" Binary_op_aliases "=" | Comp_ops
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"=" Binary_op_aliases "="
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_0() { return cEqualsSignKeyword_2_0_0; }

		//Binary_op_aliases
		public RuleCall getBinary_op_aliasesParserRuleCall_2_0_1() { return cBinary_op_aliasesParserRuleCall_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_2() { return cEqualsSignKeyword_2_0_2; }

		//Comp_ops
		public RuleCall getComp_opsParserRuleCall_2_1() { return cComp_opsParserRuleCall_2_1; }

		//Primary_expr
		public RuleCall getPrimary_exprParserRuleCall_3() { return cPrimary_exprParserRuleCall_3; }
	}

	public class Call_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call_operator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cBinary_op_aliasesParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFunctions_tblParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cWSPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPrimary_exprParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cPrimary_exprParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Call_operator:
		//	(Binary_op_aliases | Functions_tbl) WSP* "(" (Primary_expr ("," Primary_expr)*)? ")";
		public ParserRule getRule() { return rule; }

		//(Binary_op_aliases | Functions_tbl) WSP* "(" (Primary_expr ("," Primary_expr)*)? ")"
		public Group getGroup() { return cGroup; }

		//Binary_op_aliases | Functions_tbl
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Binary_op_aliases
		public RuleCall getBinary_op_aliasesParserRuleCall_0_0() { return cBinary_op_aliasesParserRuleCall_0_0; }

		//Functions_tbl
		public RuleCall getFunctions_tblParserRuleCall_0_1() { return cFunctions_tblParserRuleCall_0_1; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_1() { return cWSPTerminalRuleCall_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(Primary_expr ("," Primary_expr)*)?
		public Group getGroup_3() { return cGroup_3; }

		//Primary_expr
		public RuleCall getPrimary_exprParserRuleCall_3_0() { return cPrimary_exprParserRuleCall_3_0; }

		//("," Primary_expr)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//Primary_expr
		public RuleCall getPrimary_exprParserRuleCall_3_1_1() { return cPrimary_exprParserRuleCall_3_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class Pred_tblElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pred_tbl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLimitKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cImplementingKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cComposingKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Pred_tbl:
		//	"select" | "sort" | "limit" | "implementing" | "composing";
		public ParserRule getRule() { return rule; }

		//"select" | "sort" | "limit" | "implementing" | "composing"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//"sort"
		public Keyword getSortKeyword_1() { return cSortKeyword_1; }

		//"limit"
		public Keyword getLimitKeyword_2() { return cLimitKeyword_2; }

		//"implementing"
		public Keyword getImplementingKeyword_3() { return cImplementingKeyword_3; }

		//"composing"
		public Keyword getComposingKeyword_4() { return cComposingKeyword_4; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPred_tblParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWSPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPrimary_exprParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cPrimary_exprParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Predicate:
		//	Pred_tbl WSP* "(" (Primary_expr ("," Primary_expr)*)? ")";
		public ParserRule getRule() { return rule; }

		//Pred_tbl WSP* "(" (Primary_expr ("," Primary_expr)*)? ")"
		public Group getGroup() { return cGroup; }

		//Pred_tbl
		public RuleCall getPred_tblParserRuleCall_0() { return cPred_tblParserRuleCall_0; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_1() { return cWSPTerminalRuleCall_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(Primary_expr ("," Primary_expr)*)?
		public Group getGroup_3() { return cGroup_3; }

		//Primary_expr
		public RuleCall getPrimary_exprParserRuleCall_3_0() { return cPrimary_exprParserRuleCall_3_0; }

		//("," Primary_expr)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//Primary_expr
		public RuleCall getPrimary_exprParserRuleCall_3_1_1() { return cPrimary_exprParserRuleCall_3_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class Primary_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSPTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cConst_func_tblParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cWSPTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final RuleCall cWSPTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final RuleCall cArrayParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cStrvalParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cWSPTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Primary_expr:
		//	WSP* (Const_func_tbl WSP* "(" WSP* ")" | Array | Strval) => WSP*;
		public ParserRule getRule() { return rule; }

		//WSP* (Const_func_tbl WSP* "(" WSP* ")" | Array | Strval) => WSP*
		public Group getGroup() { return cGroup; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_0() { return cWSPTerminalRuleCall_0; }

		//Const_func_tbl WSP* "(" WSP* ")" | Array | Strval
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//Const_func_tbl WSP* "(" WSP* ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//Const_func_tbl
		public RuleCall getConst_func_tblParserRuleCall_1_0_0() { return cConst_func_tblParserRuleCall_1_0_0; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_1_0_1() { return cWSPTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_2() { return cLeftParenthesisKeyword_1_0_2; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_1_0_3() { return cWSPTerminalRuleCall_1_0_3; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_4() { return cRightParenthesisKeyword_1_0_4; }

		//Array
		public RuleCall getArrayParserRuleCall_1_1() { return cArrayParserRuleCall_1_1; }

		//Strval
		public RuleCall getStrvalParserRuleCall_1_2() { return cStrvalParserRuleCall_1_2; }

		//=> WSP*
		public RuleCall getWSPTerminalRuleCall_2() { return cWSPTerminalRuleCall_2; }
	}

	public class Functions_tblElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Functions_tbl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIsnullKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOutKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Functions_tbl:
		//	"isnull" | "in" | "out";
		public ParserRule getRule() { return rule; }

		//"isnull" | "in" | "out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"isnull"
		public Keyword getIsnullKeyword_0() { return cIsnullKeyword_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//"out"
		public Keyword getOutKeyword_2() { return cOutKeyword_2; }
	}

	public class Const_func_tblElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Const_func_tbl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEmptyKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNullKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Const_func_tbl:
		//	"true" | "false" | "empty" | "null";
		public ParserRule getRule() { return rule; }

		//"true" | "false" | "empty" | "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }

		//"empty"
		public Keyword getEmptyKeyword_2() { return cEmptyKeyword_2; }

		//"null"
		public Keyword getNullKeyword_3() { return cNullKeyword_3; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWSPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cStrvalParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cWSPTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cWSPTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cStrvalParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final RuleCall cWSPTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Array:
		//	"(" WSP* Strval WSP* ("," WSP* Strval WSP*)* ")";
		public ParserRule getRule() { return rule; }

		//"(" WSP* Strval WSP* ("," WSP* Strval WSP*)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_1() { return cWSPTerminalRuleCall_1; }

		//Strval
		public RuleCall getStrvalParserRuleCall_2() { return cStrvalParserRuleCall_2; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_3() { return cWSPTerminalRuleCall_3; }

		//("," WSP* Strval WSP*)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_4_1() { return cWSPTerminalRuleCall_4_1; }

		//Strval
		public RuleCall getStrvalParserRuleCall_4_2() { return cStrvalParserRuleCall_4_2; }

		//WSP*
		public RuleCall getWSPTerminalRuleCall_4_3() { return cWSPTerminalRuleCall_4_3; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class NcharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Nchar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALPHATerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword c_Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTildeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDollarSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAsteriskKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPlusSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cQuestionMarkKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cSolidusKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cCommercialAtKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//Nchar:
		//	ALPHA | DIGIT | "-" | "." | "_" | "~" | "$" | ":" | "*" | "+" | "?" | "/" | "@";
		public ParserRule getRule() { return rule; }

		//ALPHA | DIGIT | "-" | "." | "_" | "~" | "$" | ":" | "*" | "+" | "?" | "/" | "@"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALPHA
		public RuleCall getALPHATerminalRuleCall_0() { return cALPHATerminalRuleCall_0; }

		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_1() { return cDIGITTerminalRuleCall_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//"_"
		public Keyword get_Keyword_4() { return c_Keyword_4; }

		//"~"
		public Keyword getTildeKeyword_5() { return cTildeKeyword_5; }

		//"$"
		public Keyword getDollarSignKeyword_6() { return cDollarSignKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//"*"
		public Keyword getAsteriskKeyword_8() { return cAsteriskKeyword_8; }

		//"+"
		public Keyword getPlusSignKeyword_9() { return cPlusSignKeyword_9; }

		//"?"
		public Keyword getQuestionMarkKeyword_10() { return cQuestionMarkKeyword_10; }

		//"/"
		public Keyword getSolidusKeyword_11() { return cSolidusKeyword_11; }

		//"@"
		public Keyword getCommercialAtKeyword_12() { return cCommercialAtKeyword_12; }
	}

	public class Pct_encodedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pct_encoded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cXDIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cXDIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Pct_encoded:
		//	"%" XDIGIT XDIGIT;
		public ParserRule getRule() { return rule; }

		//"%" XDIGIT XDIGIT
		public Group getGroup() { return cGroup; }

		//"%"
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }

		//XDIGIT
		public RuleCall getXDIGITTerminalRuleCall_1() { return cXDIGITTerminalRuleCall_1; }

		//XDIGIT
		public RuleCall getXDIGITTerminalRuleCall_2() { return cXDIGITTerminalRuleCall_2; }
	}

	public class StrvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Strval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cNcharParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPct_encodedParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// *
		//Strval:
		//	"\"" (Nchar | Pct_encoded)+ "\"";
		public ParserRule getRule() { return rule; }

		//"\"" (Nchar | Pct_encoded)+ "\""
		public Group getGroup() { return cGroup; }

		//"\""
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }

		//(Nchar | Pct_encoded)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//Nchar
		public RuleCall getNcharParserRuleCall_1_0() { return cNcharParserRuleCall_1_0; }

		//Pct_encoded
		public RuleCall getPct_encodedParserRuleCall_1_1() { return cPct_encodedParserRuleCall_1_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	
	
	private ModelElements pModel;
	private AndElements pAnd;
	private OrElements pOr;
	private Ho_operandElements pHo_operand;
	private Logical_op_aliasesElements pLogical_op_aliases;
	private Higher_order_callElements pHigher_order_call;
	private Binary_op_aliasesElements pBinary_op_aliases;
	private Comp_opsElements pComp_ops;
	private ComparisonElements pComparison;
	private Call_operatorElements pCall_operator;
	private Pred_tblElements pPred_tbl;
	private PredicateElements pPredicate;
	private Primary_exprElements pPrimary_expr;
	private Functions_tblElements pFunctions_tbl;
	private Const_func_tblElements pConst_func_tbl;
	private ArrayElements pArray;
	private NcharElements pNchar;
	private Pct_encodedElements pPct_encoded;
	private StrvalElements pStrval;
	private TerminalRule tALPHA;
	private TerminalRule tDIGIT;
	private TerminalRule tXDIGIT;
	private TerminalRule tWSP;
	
	private final Grammar grammar;

	@Inject
	public RQLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.parallels.aps.ide.rqleditor.xtext.rql.RQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	operands+=Ho_operand (("," | "&") Ho_operand)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//And:
	//	"&" Ho_operand;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Or:
	//	(";" | "|") Ho_operand;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//Ho_operand:
	//	WSP* (Higher_order_call | Call_operator | Predicate | Comparison | "(" Ho_operand (And+ | Or+) ")") WSP*;
	public Ho_operandElements getHo_operandAccess() {
		return (pHo_operand != null) ? pHo_operand : (pHo_operand = new Ho_operandElements());
	}
	
	public ParserRule getHo_operandRule() {
		return getHo_operandAccess().getRule();
	}

	//Logical_op_aliases:
	//	"or" | "and" | "not";
	public Logical_op_aliasesElements getLogical_op_aliasesAccess() {
		return (pLogical_op_aliases != null) ? pLogical_op_aliases : (pLogical_op_aliases = new Logical_op_aliasesElements());
	}
	
	public ParserRule getLogical_op_aliasesRule() {
		return getLogical_op_aliasesAccess().getRule();
	}

	//Higher_order_call:
	//	Logical_op_aliases WSP* "(" (Ho_operand ("," Ho_operand)*) ")";
	public Higher_order_callElements getHigher_order_callAccess() {
		return (pHigher_order_call != null) ? pHigher_order_call : (pHigher_order_call = new Higher_order_callElements());
	}
	
	public ParserRule getHigher_order_callRule() {
		return getHigher_order_callAccess().getRule();
	}

	//Binary_op_aliases:
	//	"ne" | "eq" | "lt" | "le" | "gt" | "ge" | "like";
	public Binary_op_aliasesElements getBinary_op_aliasesAccess() {
		return (pBinary_op_aliases != null) ? pBinary_op_aliases : (pBinary_op_aliases = new Binary_op_aliasesElements());
	}
	
	public ParserRule getBinary_op_aliasesRule() {
		return getBinary_op_aliasesAccess().getRule();
	}

	//Comp_ops:
	//	"!=" | "=" | "<" | "<=" | ">" | ">=";
	public Comp_opsElements getComp_opsAccess() {
		return (pComp_ops != null) ? pComp_ops : (pComp_ops = new Comp_opsElements());
	}
	
	public ParserRule getComp_opsRule() {
		return getComp_opsAccess().getRule();
	}

	//Comparison:
	//	Strval WSP* ("=" Binary_op_aliases "=" | Comp_ops) Primary_expr;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Call_operator:
	//	(Binary_op_aliases | Functions_tbl) WSP* "(" (Primary_expr ("," Primary_expr)*)? ")";
	public Call_operatorElements getCall_operatorAccess() {
		return (pCall_operator != null) ? pCall_operator : (pCall_operator = new Call_operatorElements());
	}
	
	public ParserRule getCall_operatorRule() {
		return getCall_operatorAccess().getRule();
	}

	//Pred_tbl:
	//	"select" | "sort" | "limit" | "implementing" | "composing";
	public Pred_tblElements getPred_tblAccess() {
		return (pPred_tbl != null) ? pPred_tbl : (pPred_tbl = new Pred_tblElements());
	}
	
	public ParserRule getPred_tblRule() {
		return getPred_tblAccess().getRule();
	}

	//Predicate:
	//	Pred_tbl WSP* "(" (Primary_expr ("," Primary_expr)*)? ")";
	public PredicateElements getPredicateAccess() {
		return (pPredicate != null) ? pPredicate : (pPredicate = new PredicateElements());
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//Primary_expr:
	//	WSP* (Const_func_tbl WSP* "(" WSP* ")" | Array | Strval) => WSP*;
	public Primary_exprElements getPrimary_exprAccess() {
		return (pPrimary_expr != null) ? pPrimary_expr : (pPrimary_expr = new Primary_exprElements());
	}
	
	public ParserRule getPrimary_exprRule() {
		return getPrimary_exprAccess().getRule();
	}

	//Functions_tbl:
	//	"isnull" | "in" | "out";
	public Functions_tblElements getFunctions_tblAccess() {
		return (pFunctions_tbl != null) ? pFunctions_tbl : (pFunctions_tbl = new Functions_tblElements());
	}
	
	public ParserRule getFunctions_tblRule() {
		return getFunctions_tblAccess().getRule();
	}

	//Const_func_tbl:
	//	"true" | "false" | "empty" | "null";
	public Const_func_tblElements getConst_func_tblAccess() {
		return (pConst_func_tbl != null) ? pConst_func_tbl : (pConst_func_tbl = new Const_func_tblElements());
	}
	
	public ParserRule getConst_func_tblRule() {
		return getConst_func_tblAccess().getRule();
	}

	//Array:
	//	"(" WSP* Strval WSP* ("," WSP* Strval WSP*)* ")";
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//Nchar:
	//	ALPHA | DIGIT | "-" | "." | "_" | "~" | "$" | ":" | "*" | "+" | "?" | "/" | "@";
	public NcharElements getNcharAccess() {
		return (pNchar != null) ? pNchar : (pNchar = new NcharElements());
	}
	
	public ParserRule getNcharRule() {
		return getNcharAccess().getRule();
	}

	//Pct_encoded:
	//	"%" XDIGIT XDIGIT;
	public Pct_encodedElements getPct_encodedAccess() {
		return (pPct_encoded != null) ? pPct_encoded : (pPct_encoded = new Pct_encodedElements());
	}
	
	public ParserRule getPct_encodedRule() {
		return getPct_encodedAccess().getRule();
	}

	//// *
	//Strval:
	//	"\"" (Nchar | Pct_encoded)+ "\"";
	public StrvalElements getStrvalAccess() {
		return (pStrval != null) ? pStrval : (pStrval = new StrvalElements());
	}
	
	public ParserRule getStrvalRule() {
		return getStrvalAccess().getRule();
	}

	//terminal ALPHA:
	//	"A".."Z" | "a".."z";
	public TerminalRule getALPHARule() {
		return (tALPHA != null) ? tALPHA : (tALPHA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALPHA"));
	} 

	//terminal DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//terminal XDIGIT:
	//	DIGIT | "A".."F";
	public TerminalRule getXDIGITRule() {
		return (tXDIGIT != null) ? tXDIGIT : (tXDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XDIGIT"));
	} 

	//terminal WSP:
	//	" " | "\t";
	public TerminalRule getWSPRule() {
		return (tWSP != null) ? tWSP : (tWSP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WSP"));
	} 
}
