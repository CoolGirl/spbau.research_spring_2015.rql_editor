
/*
* generated by Xtext
*/
lexer grammar InternalRQLLexer;


@header {
package com.parallels.aps.ide.rqleditor.xtext.rql.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}




KEYWORD_55 : 'implementing';

KEYWORD_54 : 'composing';

KEYWORD_51 : '=like=';

KEYWORD_52 : 'isnull';

KEYWORD_53 : 'select';

KEYWORD_48 : 'empty';

KEYWORD_49 : 'false';

KEYWORD_50 : 'limit';

KEYWORD_38 : '=eq=';

KEYWORD_39 : '=ge=';

KEYWORD_40 : '=gt=';

KEYWORD_41 : '=le=';

KEYWORD_42 : '=lt=';

KEYWORD_43 : '=ne=';

KEYWORD_44 : 'like';

KEYWORD_45 : 'null';

KEYWORD_46 : 'sort';

KEYWORD_47 : 'true';

KEYWORD_35 : 'and';

KEYWORD_36 : 'not';

KEYWORD_37 : 'out';

KEYWORD_24 : '!=';

KEYWORD_25 : '<=';

KEYWORD_26 : '>=';

KEYWORD_27 : 'eq';

KEYWORD_28 : 'ge';

KEYWORD_29 : 'gt';

KEYWORD_30 : 'in';

KEYWORD_31 : 'le';

KEYWORD_32 : 'lt';

KEYWORD_33 : 'ne';

KEYWORD_34 : 'or';

KEYWORD_1 : '\n';

KEYWORD_2 : '\r';

KEYWORD_3 : '$';

KEYWORD_4 : '%';

KEYWORD_5 : '&';

KEYWORD_6 : '(';

KEYWORD_7 : ')';

KEYWORD_8 : '*';

KEYWORD_9 : '+';

KEYWORD_10 : ',';

KEYWORD_11 : '-';

KEYWORD_12 : '.';

KEYWORD_13 : '/';

KEYWORD_14 : ':';

KEYWORD_15 : ';';

KEYWORD_16 : '<';

KEYWORD_17 : '=';

KEYWORD_18 : '>';

KEYWORD_19 : '?';

KEYWORD_20 : '@';

KEYWORD_21 : '_';

KEYWORD_22 : '|';

KEYWORD_23 : '~';



RULE_DIGIT : '0'..'9';

RULE_XDIGIT : (RULE_DIGIT|'A'..'F');

RULE_ALPHA : ('A'..'Z'|'a'..'z');

RULE_WSP : (' '|'\t');



